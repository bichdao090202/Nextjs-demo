40
  3659 -> 3791 = 132

  41
  3792 -> 3884 = 92

  42
  3885 -> 3958 = 73

  43
  3959 -> 4012 = 53

  44
  4013 -> 4085 = 72

  45
  4086

  CREATE TABLE account (
      id BIGINT PRIMARY KEY,
      username VARCHAR(255) NOT NULL,
      password VARCHAR(255) NOT NULL
  );

  CREATE TABLE "user" (
      id BIGINT PRIMARY KEY,
      full_name VARCHAR(255) NOT NULL,
      age BIGINT,
      CONSTRAINT fk_account FOREIGN KEY (id) REFERENCES account(id)
  );

  CREATE TABLE "order" (
      id BIGINT PRIMARY KEY,
      user_id BIGINT,
      date TIMESTAMP,
      order_total_price BIGINT,
      CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES "user"(id)
  );

  CREATE TABLE product (
      id BIGINT PRIMARY KEY,
      name TEXT,
      price BIGINT
  );

  CREATE TABLE order_detail (
      order_id BIGINT,
      product_name TEXT,
      product_price BIGINT,
      quantity BIGINT,
      total BIGINT,
      CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES "order"(id)
  );

ALTER TABLE account ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;
CREATE TABLE account (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);
INSERT INTO account (username, password) VALUES ('ngocbich', '123456')

import {Pool, sql} from '@vercel/postgres';
import pg from 'pg';
// import { postgres } from '@vercel/postgres';
//
//
// const postgre = new postgres(process.env.DATABASE_URL);
// const { rows } = await postgres.query(sql(query), values);
// console.log(rows);

// const { Client } = require('pg');
//
// const client = new Client({
//     connectionString: process.env.POSTGRES_URL,
//     url: process.env.DATABASE_URL,
//     user: process.env.POSTGRES_USER,
//     host: process.env.POSTGRES_HOST,
//     database: process.env.POSTGRES_DATABASE,
//     password: process.env.POSTGRES_PASSWORD,
//     port: 5432,
//     ssl: {
//         rejectUnauthorized: false
//     }
// });



export default async function fetchAccounts() {
    try {
        // await client.connect();
        // await client.query('SELECT * FROM account;', (err, res) => {
        //     if (err) throw err;
        //     for (let row of res.rows) {
        //         console.log(JSON.stringify(row));
        //     }
        //     client.end();
        // });
        const accounts = await sql`SELECT * FROM account`;
        console.log(accounts);
        return accounts;
    } catch (error) {
        console.error('Error fetching data:', error);
        throw error;
    }
}

fetchAccounts().then((data) => {
    console.log(data);
});
